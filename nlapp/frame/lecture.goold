package frame

import (
	c "github.com/not-learning/app/clrs"
	f "github.com/not-learning/app/fonts"
	"github.com/not-learning/app/nump"
	"github.com/not-learning/app/tracks"
	//d "github.com/not-learning/app/draw"
	//v "github.com/not-learning/app/vec"
	//"image/color"

	"log"
	"strconv"
	"strings"

	l "github.com/not-learning/lmnts"
	"github.com/hajimehoshi/ebiten/v2"
)

// TODO: text size
type Lecture struct {
	luma uint8

	upper   *l.Lmnt
	inner   *l.Lmnt
	content *l.Lmnt
	screen  []*l.Lmnt
	scrStrs []string

	play bool

	exercises [][]exercise
	curEx     int
	curExL    int
	funlist   []func() bool
	curFun    int

	script     [][]string
	curScript  int
	subL       *l.Lmnt
	subContent *l.Lmnt
	subtitles  []*l.Lmnt

	btns []*l.Lmnt

	nump   *nump.NumP
	font   *f.Font
	Tracks *tracks.Tracks
//*d.Img
//va, vb, vc *v.VecF32
}

type exercise struct {
	text    string
	ans     int
	problem bool
	fn      func()
}

func Init(x1, y1, x2, y2 float32) *Lecture {
	lc := &Lecture{}

	lc.upper = l.New()
	lc.upper.SetRect(x1, y1, x2, x2)

	lc.inner = l.New()
	lc.inner.Name = "in"
	lc.inner.SetRow()
	lc.inner.SetSize(0, 50)
	lc.upper.GapsAround(0, lc.inner)
	lc.content = l.New()
	lc.inner.AddL(50, lc.content)

	lc.upper.DoAll()

	lc.subL = l.New()
	lc.subL.SetRect(x1, x2, x2, y2)

	lc.subContent = l.New()
	lc.subtitles = append(lc.subtitles, l.New(), l.New())
	for i := range lc.subtitles {
		lc.subtitles[i].SetSize(0, 20)
	}
	lc.subContent.Add(lc.subtitles...)

	btnRow := l.New()
	btnRow.SetRow()
	lc.btns = make([]*l.Lmnt, 3)
	for i := range 3 {
		lc.btns[i] = l.New()
		lc.btns[i].SetSize(150, 75)
	}
	lc.btns[1].SetSize(75, 75)
	btnRow.GapsBetween(0, lc.btns...)
	lc.subContent.AddT(20, btnRow)
	lc.subL.AddLR(20, 20, lc.subContent)

	lc.subL.DoAll()

	lc.luma = 255
	lc.seqFunInit()
	lc.nump = nump.Init(x1, y1, x2, y2)
	lc.font = f.InitFont()
	lc.nump.Play()

/*lc.Img = d.Init()
/*lc.va = v.NewF32(10, 10)
lc.vb = v.NewF32(100, 200)
lc.vc = v.NewF32(300, 500)//*/

	return lc
}

func (lc *Lecture) ScriptInit(texts ...string) {
	for _, t := range texts {
		lc.doScript(t)
	}
}

func (lc *Lecture) doScript(text string) {
	var res = [][]string{}
	lc.font.Set(15, c.YCC(lc.luma, 128, 128))
	x1, _, x2, _ := lc.subContent.Rect()
	w := x2 - x1
	for i, v := range strings.Split(text, "\n") {
		res = append(res, []string{})
		for _, w := range lc.font.Wrap(v, float64(w)) {
			res[i] = append(res[i], w...)
		}
	}
	lc.script = append(lc.script, res...)
}

func (lc *Lecture) doEx(txt [][]string) {
	ex := []exercise{}
	for _, v := range txt {
		ans, problem := 0, false
		if v[1] > "" {
			a, e := strconv.Atoi(v[1])
			if e != nil {log.Println("doEx: ", e)}
			ans, problem = a, true
		}

		ex = append(ex, exercise{
			text: v[0],
			ans: ans,
			problem: problem,
		})
	}
	lc.exercises = append(lc.exercises, ex)
}

func (lc *Lecture) ExInit(txt ...[][]string) {
	for _, v := range txt { lc.doEx(v) }
}

const fs = 5 // TODO: move somewhere safe

func (lc *Lecture) fade() bool {
	lc.luma -= fs
	if lc.luma < fs {return true}
	return false
}

func (lc *Lecture) unfade() bool {
	lc.luma += fs
	if lc.luma > 255-fs {return true}
	return false
}

func (lc *Lecture) addScreen() {
	ln := len(lc.screen)
	lc.screen = append(lc.screen, l.New())
	lc.screen[ln].SetSize(0, 50)
	lc.content.Add(lc.screen[ln])
	lc.inner.SetSize(0, float32(50*(ln+1)))
	lc.upper.DoAll()
}

func (lc *Lecture) clearScreen() {
	lc.screen = []*l.Lmnt{}
	lc.content.Clear()
	lc.upper.DoAll()
}//*/

func (lc *Lecture) appendScrStrs() {
	if lc.exercises[lc.curExL][lc.curEx].problem { lc.nump.NumClear() }
	lc.scrStrs = append(lc.scrStrs, lc.exercises[lc.curExL][lc.curEx].text)
}

func (lc *Lecture) nextScript() bool {
	if lc.curScript < len(lc.script)-1 { lc.curScript++ }
	return true
}

func (lc *Lecture) nextEx() bool {
	lc.curEx++
	if lc.curEx >= len(lc.exercises[lc.curExL]) {
		lc.curEx = 0
		lc.scrStrs = []string{}
		lc.clearScreen()
		if lc.curExL < len(lc.exercises)-1 { lc.curExL++ }
	}

	if lc.exercises[lc.curExL][lc.curEx].text != "" {
		lc.addScreen()
		lc.appendScrStrs()
	}
	return true
}

func (lc *Lecture) next() bool {
	if lc.Tracks.IsPlaying() || !lc.nump.IsPlaying() { return false }
	lc.Tracks.Next()
	lc.nextScript()
	lc.nextEx()
	return true
}

func (lc *Lecture) playStr() string {
	if lc.nump.IsPlaying() {
		return "▮▮"
	} else {
		return "▶"
	}
}
//▮▮▶▯▯▷

func (lc *Lecture) correct() {
	//lc.scrStrs[len(lc.scrStrs)-1] += " ✓"
	lc.Tracks.PlayCorrect()
}

func (lc *Lecture) wrong() {
	//lc.scrStrs[len(lc.scrStrs)-1] += " ✗"
	lc.Tracks.PlayWrong()
}

func (lc *Lecture) input() bool {
	if !lc.exercises[lc.curExL][lc.curEx].problem { return true }
	str := "?"
	if lc.nump.Num() != 0 { str = lc.nump.Str() }
	lc.scrStrs[len(lc.scrStrs)-1] = lc.exercises[lc.curExL][lc.curEx].text + str

	return lc.nump.Check(
		lc.exercises[lc.curExL][lc.curEx].ans,
		lc.correct,
		lc.wrong,
	)
}

func (lc *Lecture) end() bool {
	lc.scrStrs = []string{`The End`}
	return false
}

func (lc *Lecture) seqFunInit() {
	lc.funlist = []func() bool{
		//lc.unfade,
		lc.input,
		//lc.fade,
		lc.next,
	}
}

func (lc *Lecture) Update() {
	lc.nump.Update()
	if lc.funlist[lc.curFun]() { lc.curFun++ }
	if lc.curFun >= len(lc.funlist) { lc.curFun = 0 }
}

func (lc *Lecture) Draw(scr *ebiten.Image) {
	//.WalkUp(l.TestDraw(scr))
	if lc.exercises[lc.curExL][lc.curEx].problem { lc.nump.Draw(scr) }

	for i, v := range lc.script[lc.curScript] {
		x, y, _, _ := lc.subtitles[i].Rect()
		lc.font.Set(15, c.YCC(lc.luma, 128, 128))
		lc.font.Draw(scr, v, x, y)
	}

	for i := range lc.screen {
		//l.Draw(scr, lc.screen[i])
		x, y, _, _ := lc.screen[i].Rect()
		lc.font.Set(50, c.YCC(lc.luma, 128, 128))
		lc.font.Draw(scr, lc.scrStrs[i], x, y)
	}

	lc.font.Set(50, c.YCC(lc.luma, 128, 128))
	x, y := lc.btns[1].MidF32()
	lc.font.DrawCenter(scr, lc.playStr(), x, y-5) //TODO: center properly
	/*lc.font.Set(70, c.YCC(lc.luma, 128, 128))
	x, y = lc.btns[0].MidF32()
	lc.font.DrawCenter(scr, "◄", x, y-7) //TODO: center properly
	lc.font.Set(70, c.YCC(lc.luma, 128, 128))
	x, y = lc.btns[2].MidF32()
	lc.font.DrawCenter(scr, "►", x, y-7) //TODO: center properly*/

//lc.Img.Poly([]*v.VecF32{scr, lc.va, lc.vb, lc.vc}, color.White)
//lc.Img.Arc(scr, 100, 100, 100, 1.5, 3, color.White)
}
//☞☜☛☚
//◄► ◅▻

func (lc *Lecture) Play()  { lc.nump.Play() }
func (lc *Lecture) Stop()  { lc.nump.Stop() }
func (lc *Lecture) Pause() { lc.nump.Pause() }//*/

//font.Metrics()
//font.Advance()
