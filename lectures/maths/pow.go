package maths

import (
	//c "github.com/not-learning/app/clrs"
	"github.com/not-learning/app/frame"
	//"github.com/not-learning/app/tracks"
	//_ "embed"
	"strings"
	"encoding/csv"

	"github.com/hajimehoshi/ebiten/v2"
)

type Power struct {
	*frame.Lecture
	//tracks *tracks.Tracks
}

/*//go:embed powScript.txt
var script string

////go:embed powText.txt
var text1 = `5√ó2 = 5+5`

////go:embed powProblem.txt//*/

// text|ans
var ex0 = `|`
var ex1 = `|
5√ó3 = 5+5+5|`

var ex2 = `|
5¬≤ = 5√ó5|
5¬≥ = 5√ó5√ó5|
5‚Å¥ = 5√ó5√ó5√ó5|
5‚Åµ = 5√ó5√ó5√ó5√ó5|`

var ex3 = `
10¬≤ = |100
10¬≥ = |1000
10‚Å¥ = |10000
10À£ = 1000000|
x = |6`

var t1 = `–¢—ã –∫–æ–Ω–µ—á–Ω–æ –∑–Ω–∞–µ—à—å, —á—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏–µ - —ç—Ç–æ —Å–ª–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–µ–ª.
–ü—è—Ç—å –Ω–∞ —Ç—Ä–∏ - —ç—Ç–æ –ø—è—Ç—å –ø–ª—é—Å –ø—è—Ç—å –ø–ª—é—Å –ø—è—Ç—å.
–¢–∞–∫ –≤–æ—Ç, —Å—Ç–µ–ø–µ–Ω—å - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —É–º–Ω–æ–∂–µ–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —á–∏—Å–µ–ª.
–ü—è—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π —ç—Ç–æ –ø—è—Ç—å —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –ø—è—Ç—å.
–ü—è—Ç—å –≤ —Ç—Ä–µ—Ç—å–µ–π —ç—Ç–æ –ø—è—Ç—å –Ω–∞ –ø—è—Ç—å –Ω–∞ –ø—è—Ç—å.
–ò —Ç–∞–∫
–¥–∞–ª–µ–µ.
–°–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –¥–µ—Å—è—Ç—å –≤–æ –≤—Ç–æ—Ä–æ–π?
–ê –≤ —Ç—Ä–µ—Ç—å–µ–π?
–í —á–µ—Ç–≤–µ—Ä—Ç–æ–π?
–í –∫–∞–∫—É—é —Å—Ç–µ–ø–µ–Ω—å –Ω–∞–¥–æ –≤–æ–∑–≤–µ—Å—Ç–∏ –¥–µ—Å—è—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–∏–ª–ª–∏–æ–Ω?`

func myRead(text string) [][]string {
	r := csv.NewReader(strings.NewReader(text))
	r.Comma = '|'
	recs, err := r.ReadAll()
	if err != nil { panic(err) }
	return recs
}

func InitPow(x1, y1, x2, y2 float32) *Power {
	p := &Power{}
	p.Lecture = frame.Init(x1, y1, x2, y2)

	p.Lecture.ExInit(myRead(ex0), myRead(ex1), myRead(ex2), myRead(ex3))
	p.Lecture.ScriptInit(strings.Split(t1, "\n"))
	//p.Lecture.Play()

	//p.tracks = tracks.Init()
	//p.tracks.Play()
	return p
}

func (p *Power) Draw(scr *ebiten.Image) {
	p.Lecture.Draw(scr)
}

func (p *Power) Update() {
	//p.tracks.Update()
	p.Lecture.Update()
}

/*
hi there
À£
‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ
‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ‚Åø
ùüù
‚Öï
5√ó5√ó5
*/
